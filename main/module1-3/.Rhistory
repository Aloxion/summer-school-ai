knitr::opts_chunk$set(echo = TRUE)
load("../../module1/.RData")
# --- Task 1: Simple Logistic Regression ---
merged_all_new <- merged_all
# Build the logistic regression model
model_simple <- glm(metastasis ~ Urin_ret, data = merged_all, family = "binomial")
View(merged_all)
knitr::opts_chunk$set(echo = TRUE)
load("../../module1/.RData")
# --- Task 1: Simple Logistic Regression ---
merged_all_new <- merged_all
# Build the logistic regression model
model_simple <- glm(metastasis ~ Urin_ret, data = merged_all, family = "binomial")
knitr::opts_chunk$set(echo = TRUE)
load("../../module1/.RData")
# --- Task 1: Simple Logistic Regression ---
merged_all_new <- merged_all
# Build the logistic regression model
model_simple <- glm(metastasis ~ Urin_ret, data = merged_all, family = "binomial")
View(merged_all)
View(merged_all)
View(merged_all)
library(readr)
library(dplyr)
library(lubridate)
library(psych)
# Rename datasets for clarity
clinical_data <- read_csv("../task1/task1_result.csv") # DATASET 1
biochem_data <- read_csv("../../DATASET2.csv")            # DATASET 2
diagnosis_data <- read_csv("../task3/task3_result.csv")      # Cleaned DATASET 3
# Merge clinical and biochemical data (inner join on ID)
merged1 <- merge(clinical_data, biochem_data, by = "ID", all = TRUE)  # Use all=TRUE to keep all patients
ncol(clinical_data)
ncol(biochem_data)
ncol(diagnosis_data)
ncol(merged1)
# Merge with diagnosis data
merged_all <- merge(merged1, diagnosis_data, by = "ID", all = TRUE)
# Replace NAs in diagnosis columns (columns 20 to 25) with 0
merged_all[, 20:25][is.na(merged_all[, 20:25])] <- 0
colSums(is.na(merged_all))
# Check merged result
dim(merged_all)
summary(merged_all)
# ---------------------------------------------
# Step 2: Impute missing values (e.g., with mean)
# ---------------------------------------------
# Example: Impute missing values in biochemical columns with the mean
# You can select specific columns or apply to all numeric ones
# Find numeric columns
numeric_cols <- sapply(merged_all, is.numeric)
# Impute missing values with column mean (safe for numeric only)
merged_all[, numeric_cols] <- lapply(merged_all[, numeric_cols], function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
saveRDS(merged_all, '../data/merged_all.rds')
# ---------------------------------------------
# Step 3: Double-check for remaining missing values
# ---------------------------------------------
colSums(is.na(merged_all))
# see merged_all for the merged output for Task 4:
# View(merged_all)
View(merged_all)
knitr::opts_chunk$set(echo = TRUE)
load("../../module1/.RData")
# --- Task 1: Simple Logistic Regression ---
merged_all_new <- merged_all
# Build the logistic regression model
model_simple <- glm(metastasis ~ Urin_ret, data = merged_all, family = "binomial")
load("~/Documents/GitHub/summer-school-ai/main/module1/.RData")
knitr::opts_chunk$set(echo = TRUE)
load("../../module1/.RData")
# --- Task 1: Simple Logistic Regression ---
merged_all_new <- merged_all
# Build the logistic regression model
model_simple <- glm(metastasis ~ Urin_ret, data = merged_all, family = "binomial")
View(merged_all)
View(merged_all_new)
library(readr)
library(dplyr)
library(lubridate)
library(psych)
# Rename datasets for clarity
clinical_data <- read_csv("../task1/task1_result.csv") # DATASET 1
biochem_data <- read_csv("../../DATASET2.csv")            # DATASET 2
diagnosis_data <- read_csv("../task3/task3_result.csv")      # Cleaned DATASET 3
# Merge clinical and biochemical data (inner join on ID)
merged1 <- merge(clinical_data, biochem_data, by = "ID", all = TRUE)  # Use all=TRUE to keep all patients
ncol(clinical_data)
ncol(biochem_data)
ncol(diagnosis_data)
ncol(merged1)
# Merge with diagnosis data
merged_all <- merge(merged1, diagnosis_data, by = "ID", all = TRUE)
# Replace NAs in diagnosis columns (columns 20 to 25) with 0
merged_all[, 20:25][is.na(merged_all[, 20:25])] <- 0
colSums(is.na(merged_all))
# Check merged result
dim(merged_all)
summary(merged_all)
# ---------------------------------------------
# Step 2: Impute missing values (e.g., with mean)
# ---------------------------------------------
# Example: Impute missing values in biochemical columns with the mean
# You can select specific columns or apply to all numeric ones
# Find numeric columns
numeric_cols <- sapply(merged_all, is.numeric)
# Impute missing values with column mean (safe for numeric only)
merged_all[, numeric_cols] <- lapply(merged_all[, numeric_cols], function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
saveRDS(merged_all, '../data/merged_all.rds')
save.image()
# ---------------------------------------------
# Step 3: Double-check for remaining missing values
# ---------------------------------------------
colSums(is.na(merged_all))
# see merged_all for the merged output for Task 4:
# View(merged_all)
load("~/Documents/GitHub/summer-school-ai/main/module1/task4/.RData")
# ---------------------------------------------
# Step 3: Double-check for remaining missing values
# ---------------------------------------------
colSums(is.na(merged_all))
load("~/Documents/GitHub/summer-school-ai/main/module1/.RData")
library(readr)
library(dplyr)
library(lubridate)
library(psych)
# Rename datasets for clarity
clinical_data <- read_csv("../task1/task1_result.csv") # DATASET 1
biochem_data <- read_csv("../../DATASET2.csv")            # DATASET 2
diagnosis_data <- read_csv("../task3/task3_result.csv")      # Cleaned DATASET 3
# Merge clinical and biochemical data (inner join on ID)
merged1 <- merge(clinical_data, biochem_data, by = "ID", all = TRUE)  # Use all=TRUE to keep all patients
ncol(clinical_data)
ncol(biochem_data)
ncol(diagnosis_data)
ncol(merged1)
# Merge with diagnosis data
merged_all <- merge(merged1, diagnosis_data, by = "ID", all = TRUE)
# Replace NAs in diagnosis columns (columns 20 to 25) with 0
merged_all[, 20:25][is.na(merged_all[, 20:25])] <- 0
colSums(is.na(merged_all))
# Check merged result
dim(merged_all)
summary(merged_all)
# ---------------------------------------------
# Step 2: Impute missing values (e.g., with mean)
# ---------------------------------------------
# Example: Impute missing values in biochemical columns with the mean
# You can select specific columns or apply to all numeric ones
# Find numeric columns
numeric_cols <- sapply(merged_all, is.numeric)
# Impute missing values with column mean (safe for numeric only)
merged_all[, numeric_cols] <- lapply(merged_all[, numeric_cols], function(x) {
ifelse(is.na(x), mean(x, na.rm = TRUE), x)
})
saveRDS(merged_all, '../data/merged_all.rds')
save.image(file = '../.RData')
# ---------------------------------------------
# Step 3: Double-check for remaining missing values
# ---------------------------------------------
colSums(is.na(merged_all))
# see merged_all for the merged output for Task 4:
# View(merged_all)
load("~/Documents/GitHub/summer-school-ai/main/module1/.RData")
View(age_prostate_cancer)
View(age_prostate_cancer)
View(age_prostate_cancer)
View(age_prostate_cancer)
View(merged_all)
load("~/Documents/GitHub/summer-school-ai/main/module1-2/.RData")
View(merged_all)
View(merged_all_pca)
knitr::opts_chunk$set(echo = TRUE)
load("../../module1/.RData")
# --- Task 2 ---
# Load required library
library(pROC)
# Example predictors to include (adjust if needed):
# Urin_ret, psa, age_pc_diag, albumin, lymphocyte, creatinine
# Ensure these variables exist in your 'merged_all' data frame.
model_multiple <- glm(
metastasis ~ Urin_ret + psa + age_at_prostate_cancer_diagnosis + albumin + lymphocyte + creatinine,
data = merged_all,
family = "binomial"
)
summary(model_multiple)
# The exponentiated coefficients show the odds ratio
exp(coef(model_multiple))
# Predict probabilities
merged_all$predicted_prob_mult <- predict(model_multiple, type = "response")
# Classify using a 0.5 threshold
merged_all$predicted_class_mult <- ifelse(merged_all$predicted_prob_mult >= 0.5, 1, 0)
# Create a confusion matrix
table(Predicted = merged_all$predicted_class_mult, Actual = merged_all$metastasis)
# Calculate performance metrics
TP <- sum(merged_all$predicted_class_mult == 1 & merged_all$metastasis == 1)
TN <- sum(merged_all$predicted_class_mult == 0 & merged_all$metastasis == 0)
FP <- sum(merged_all$predicted_class_mult == 1 & merged_all$metastasis == 0)
FN <- sum(merged_all$predicted_class_mult == 0 & merged_all$metastasis == 1)
accuracy_mult <- (TP + TN) / (TP + TN + FP + FN)
sensitivity_mult <- TP / (TP + FN)
specificity_mult <- TN / (TN + FP)
cat("Accuracy:", round(accuracy_mult, 3), "\n")
cat("Sensitivity:", round(sensitivity_mult, 3), "\n")
cat("Specificity:", round(specificity_mult, 3), "\n")
# ROC curve analysis
roc_mult <- roc(merged_all$metastasis, merged_all$predicted_prob_mult)
plot(roc_mult, main = "ROC Curve - Multiple Logistic Regression", col = "#1f78b4", print.auc = TRUE)
saveRDS(model_multiple, 'model_multiple.rds')
View(merged_all)
